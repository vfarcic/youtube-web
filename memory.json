{"type":"entity","name":"MCP Tool Usage Guidelines","entityType":"development_guideline","observations":["Always use `github` MCP to interact with GitHub repositories, issues, pull requests, and other GitHub operations","Always use `context7` MCP to search for information about libraries, languages, frameworks, and development tools","Always use `memory` MCP to retrieve stored memory or store new memory and knowledge","These are the preferred MCP tools for their respective domains as specified by the user","Always use `puppeteer` MCP for browser automation tasks like navigation and form interaction, but avoid taking screenshots for page analysis unless specifically requested"]}
{"type":"entity","entityType":"development_guideline","name":"Mock Development Guidelines","observations":["Keep mocks and the \"real\" app separate at all times.","Reference mocks when creating the app.","When changing the app's appearance, first work on the mock, then move the changes to the app once the mock is satisfactory.","Do NOT write tests for the mock server","Mock server testing should be excluded from all test suites","Focus testing only on the main application, not mock servers"]}
{"type":"entity","entityType":"development_guideline","name":"Backend API Reference","observations":["Use openapi.yaml from https://github.com/vfarcic/youtube-automation to learn backend API used by this app."]}
{"type":"entity","entityType":"Configuration","name":"Development Guidelines","observations":["Mocks should run on port 8081 for starting and interacting with the mock server.","Assume that both the app and the mock are running when testing with Puppeteer","App typically runs on default Next.js port (3000) and mock runs on port 8081","When instructed to start servers, also open them in a browser automatically","Should open both app (http://localhost:3000) and mock (http://localhost:8081) in browser after starting servers","When opening browsers for started servers, use Simple Browser (open_simple_browser) instead of Puppeteer","Do not use f1e_puppeteer_navigate for opening servers in browsers during startup","When starting servers: open mock (port 8081) in Simple Browser, open app (port 3000) in real browser","Use open_simple_browser for mock server, use system default browser for main app","GitHub username is `vfarcic` - use this for all GitHub operations and repository references"]}
{"type":"entity","name":"Memory MCP Usage Restriction","entityType":"development_guideline","observations":["Do NOT use memory MCP to store information unless explicitly instructed by the user to memorize something","Memory MCP should only be used when user specifically requests to store information","Do not use memory MCP for internal decision-making about what to remember","Only use memory MCP tools (f1e_create_entities, f1e_add_observations, etc.) when explicitly asked by user"]}
{"type":"entity","name":"Puppeteer MCP Integration","entityType":"development_tool","observations":["Puppeteer is already available as an MCP (Model Context Protocol) server in this environment","No separate installation of Puppeteer is required - it can be used directly through MCP tools","Available Puppeteer MCP tools include: f1e_puppeteer_navigate, f1e_puppeteer_click, f1e_puppeteer_fill, f1e_puppeteer_screenshot, f1e_puppeteer_evaluate, f1e_puppeteer_hover, f1e_puppeteer_select","Should not suggest installing Puppeteer when it's already available via MCP"]}
{"type":"entity","name":"YouTube Web App Test Completion Workflow","entityType":"automation_workflow","observations":["Triggered by completion phrases: 'we are done', 'that's it', 'finished', 'complete', 'wrap this up'","Step 1: Run all tests using 'cd app && npm test'","Step 2: Stop any running development servers and background processes","Step 3: Show files to be pushed for user review before proceeding","Step 4: Create a new descriptive branch name","Step 5: Add and commit all modified/created files","Step 6: Push to GitHub and create PR","Step 7: Merge the PR after successful push","Must identify files that were created or modified during session","Current session files: tests/test-runner.js, app/package.json, run-tests.js, SPEED-OPTIMIZATION-GUIDE.md","Always preview files before pushing for user approval","Step 0 (NEW): Update README.md with latest project evaluation and current state","README updates should happen BEFORE starting git operations","README should reflect actual project structure, features, and current development status","Remove aspirational language and focus on implemented functionality","Include accurate technology versions, test metrics, and installation instructions","After merging the Pull Request, delete the remote feature branch.","After deleting the remote feature branch, delete the local feature branch.","After deleting the local feature branch, commit the memory.json file.","After deleting the local feature branch, switch to the main branch and pull the latest changes.","Commit the memory.json file to the main branch with a message like 'docs: Update workflow memory after project finalization'.","Push the main branch with the updated memory.json."]}
{"type":"entity","name":"YouTube Web App Test Architecture","entityType":"project_structure","observations":["Single optimized test file: tests/test-runner.js using regular Puppeteer","14 comprehensive tests covering homepage, videos, create, edit pages","Execution time: ~1.2 seconds for full test suite","100% test success rate achieved","Removed redundant test files to eliminate 70% duplication","Clean package.json with npm test command pointing to ../tests/test-runner.js","App running on http://localhost:3000 for testing","Uses batched DOM evaluations for maximum speed optimization"]}
{"type":"entity","entityType":"development_guideline","name":"Core Development Practices","observations":["When changing app code, always write or update corresponding tests and ensure they pass."]}
{"type":"entity","entityType":"instruction_preference","name":"Testing Preferences","observations":["Do not use Puppeteer to take screenshots as it seems to cause issues."]}
{"type":"entity","entityType":"development_guideline","name":"Test Failure Debugging","observations":["When tests fail, always check Puppeteer MCP to gather more info if any of the tests fail. Do not use screenshots for this."]}
{"type":"relation","from":"YouTube Web App Test Completion Workflow","to":"YouTube Web App Test Architecture","relationType":"manages completion of"}
{"type":"relation","from":"YouTube Web App Test Completion Workflow","to":"Viktor Farcic","relationType":"executes workflow for"}